generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
  resumeCount   Int       @default(0)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id               String         @id @default(cuid())
  title            String         @default("Untitled")
  userId           String
  personalInfoId   String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  personalInfo     PersonalInfo   @relation(fields: [personalInfoId], references: [id], onDelete: Cascade)
  educations       Education[]
  workExperiences  WorkExperience[]
  skills           Skill[]
  projects         Project[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  @@index([userId])
}

model PersonalInfo {
  id              String   @id @default(cuid())
  fullName        String
  phone           String?
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  website         String?
  summary         String?
  resume          Resume[]
}

model Education {
  id              String   @id @default(cuid())
  institution     String
  degree          String
  fieldOfStudy    String
  startDate       DateTime
  endDate         DateTime?
  achievements    String?
  resumeId        String
  resume          Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  @@index([resumeId])
}

model WorkExperience {
  id              String   @id @default(cuid())
  title           String
  company         String
  location        String?
  startDate       DateTime
  endDate         DateTime?
  description     String?
  resumeId        String
  resume          Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  @@index([resumeId])
}

model Skill {
  id              String   @id @default(cuid())
  name            String
  level           String
  resumeId        String
  resume          Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  @@index([resumeId])
}

model Project {
  id              String   @id @default(cuid())
  name            String
  description     String?
  url             String?
  resumeId        String
  resume          Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  @@index([resumeId])
}
